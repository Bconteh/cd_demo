http://188.117.129.133:1080/jenkins/github-webhook/

http://172.16.175.145:8080/jenkins/

http://188.117.129.133:1080/jenkins/

git add .
git commit -m "first push"
git push

emailext attachLog: true, body: '''Hello guys,

a build has been pushed.''', recipientProviders: [[$class: 'DevelopersRecipientProvider']], replyTo: 'buba.conteh@euvic.pl', subject: 'Build has been pushed', to: 'buba.conteh@euvic.pl'

==================================================================

/var/lib/tomcat8  <==directory you should see these directories conf, logs, webapps, work.Webapps is where your servlets will go ( or at least a xml file that points to them)




i copied the war file to /var/lib/tomcat8/webapps for my real tomcat installation
To enable admin web based features you need to do the following,Edit /etc/tomcat8/tomcat-users.xml
In /var/lib/tomcat8 directory you should see these directories conf, logs, webapps, work.Webapps is where your servlets will go ( or at least a xml file that points to them)
===================================================================

peripheral installation was done in /opt/tomcat8/
changing tomcat users is done here /opt/tomcat/conf/tomcat-users.xml
.jenkins is in my home with ls -a


tip to have another instance of tomcat, where you copy the tomcat file, you can just navigate there and type "./bin/startup.sh"
/bin/startup.sh
ps -ef | grep java
netstat -anp | grep java

.jenkins is safed in my home directory by default
vi /root/.jenkins/secrets/initialAdminPassword

the jenkins in my webapp is used to enable accessing jenkins on the web browser lie localhost:8080/jenkins
if you want to change the location of .jenkins you use export JENKINS_HOME=/opt/tomcat/ or you can target the /etc/profile file and config it there


parallel core: {
},	tests: {
}, failFast: true


Jenkins hook url 

Created credentials with id 91ab70c7-aaf9-4f39-afe4-a82da29a255d (can use it for GitHub Server Config)

=================================================Deployment from build============================
cd .jenkins/jobs/projectname/workspace/dist/file.jar
cp file.jar /opt/tomcat8/webbapps/
you can now go to tomcat, manager application and the copid file can be viewed and clicked there
=======================================
maven
node {
   // Mark the code checkout 'stage'....
   stage 'Checkout'
   
   git url: 'https://github.com/TTFHW/jenkins_pipeline_java_maven.git'

   // Get the maven tool.
   // ** NOTE: This 'M3' maven tool must be configured
   // **       in the global configuration.           
   def mvnHome = tool 'M3'

   // Mark the code build 'stage'....
   stage 'Build'
   // Run the maven build
   sh "${mvnHome}/bin/mvn -Dmaven.test.failure.ignore clean package"
   step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
}
====================
pilee env

node {

 stage 'Stage 1'
   echo 'We are about to pretend that some of our Jenkins run is machine specific'
   echo 'This allows us to keep our infrastucture as code clean'
   echo 'see 12factor for the basic idea of what to keep in environment variables'
   echo 'JAVA_HOME is printed to the screen below'
   echo 'If this had been a real project, you might use environment variables to configure a portion of your Jenkins run'
   echo 'that you did not want to commit to source because every Jenkins server should run it differently'
   echo 'notice that this fails to echo JAVA_HOME ${env.JAVA_HOME} due to single quotes'   
   echo "JAVA_HOME is ${env.JAVA_HOME} on this machine"   
}
java -jar jenkins.war

smtp.gmail.com
 and go to advance optin for username and pass / smtp authen/ username: b.conteh@/ pass/use ssl/ smtp port 465/ reply to email your email/utf-8



/root/.jenkins/plugins/artifactory/META-INF/maven/org.jenkins-ci.plugins/artifactory/pom.xml


mvn -version
ant -diagnostics

artifact release promotion after the artifact release stage has completed.

you need to stage the artifact first into the libs-stage-local first and when it is released,
it goes to libs-release-local